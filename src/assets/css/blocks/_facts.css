@property --num {
  syntax: "<integer>";
  initial-value: 0;
  inherits: false;
}

.facts {
  display: flex;
  flex-wrap: wrap;
  gap: var(--space-l) var(--space-s);
  justify-content: space-evenly;
}

.fact {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: var(--space-2xs);
}

.fact__number {
  --top-color: #222;
  --bottom-color: #393939;
  display: grid;
  align-items: center;
  justify-content: center;
  grid-template-columns: 1fr;
  grid-template-rows: 1fr;
  font-variant-numeric: tabular-nums;
  line-height: 1;
  gap: var(--space-2xs);
  text-align: center;
  font-size: var(--text-3xl);
  font-weight: var(--weight-black);
  color: white;
  padding: 0.25em;
  border-radius: 0.75rem;
  background-image: linear-gradient(
    to bottom,
    var(--top-color),
    var(--top-color) calc(50% - 1px),
    black calc(50% - 1px),
    black,
    var(--bottom-color) calc(50% + 1px),
    var(--bottom-color)
  );

  @media (--lg) {
    font-size: calc(var(--text-3xl) * 1.25);
  }

  &::before,
  &::after {
    grid-column: 1 / 2;
    grid-row: 1 / 2;
    text-align: c;
  }

  &::before {
    content: counter(num);

    @media reader, speech, aural {
      display: none;
      visibility: hidden;
    }
  }

  &::after {
    content: attr(data-count-to);
    opacity: 0;

    pointer-events: none;
  }

  /* Start animation immediately if JS is disabled */
  @media (scripting: none) {
    animation: count-up 1.5s var(--ease-out-cubic) both;
    counter-reset: num var(--num);
  }

  /* Start animation when in view, toggled via JS */
  @media (scripting) {
    .is-in-view & {
      animation: count-up 1.5s var(--ease-out-cubic) both;
      counter-reset: num var(--num);
    }
  }
}

.fact__label {
  font-size: var(--text-sm);
  letter-spacing: 0.025em;
  color: var(--color-gray-2);
  line-height: 1.2;
  font-weight: var(--weight-bold);
  text-align: center;
  text-transform: uppercase;
}

@keyframes count-up {
  0% {
    --num: 0;
  }
  100% {
    --num: var(--count-to);
  }
}
